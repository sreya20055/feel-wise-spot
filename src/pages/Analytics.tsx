import { useState, useEffect } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useNavigate, Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { Separator } from '@/components/ui/separator';
import {
  ArrowLeft,
  BarChart3,
  TrendingUp,
  TrendingDown,
  Minus,
  Lightbulb,
  Calendar,
  Target,
  Brain,
  Activity,
  Download,
  RefreshCw
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useQuery } from '@tanstack/react-query';
import { motion } from 'framer-motion';
import {
  analyticsService,
  MoodTrend,
  CourseImpact,
  AccessibilityUsage,
  UserInsight,
  WeeklyReport
} from '@/services/analyticsService';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell
} from 'recharts';

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];

export default function Analytics() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const { toast } = useToast();

  const [activeTab, setActiveTab] = useState<'overview' | 'trends' | 'insights' | 'reports'>('overview');
  const [timeRange, setTimeRange] = useState(30);

  // Fetch analytics data
  const { data: moodTrends, refetch: refetchMoodTrends } = useQuery({
    queryKey: ['mood-trends', user?.id, timeRange],
    queryFn: () => analyticsService.getMoodTrends(user!.id, timeRange),
    enabled: !!user,
  });

  const { data: courseImpacts } = useQuery({
    queryKey: ['course-impacts', user?.id],
    queryFn: () => analyticsService.getCourseImpact(user!.id),
    enabled: !!user,
  });

  const { data: accessibilityUsage } = useQuery({
    queryKey: ['accessibility-usage', user?.id],
    queryFn: () => analyticsService.getAccessibilityUsage(user!.id),
    enabled: !!user,
  });

  const { data: insights } = useQuery({
    queryKey: ['user-insights', user?.id],
    queryFn: () => analyticsService.generateInsights(user!.id),
    enabled: !!user,
  });

  const { data: weeklyReport } = useQuery({
    queryKey: ['weekly-report', user?.id],
    queryFn: () => analyticsService.generateWeeklyReport(user!.id),
    enabled: !!user,
  });

  const { data: dashboardStats } = useQuery({
    queryKey: ['dashboard-stats', user?.id],
    queryFn: () => analyticsService.getDashboardStats(user!.id),
    enabled: !!user,
  });

  const refreshData = () => {
    refetchMoodTrends();
    toast({
      title: "Data Refreshed",
      description: "Analytics data has been updated.",
    });
  };

  const downloadReport = () => {
    if (!weeklyReport) return;

    const reportContent = `
Weekly Wellbeing Report
${weeklyReport.period}

SUMMARY:
- Average Mood: ${weeklyReport.mood_average}/10
- Trend: ${weeklyReport.mood_trend}
- Courses Completed: ${weeklyReport.courses_completed}
- Journal Entries: ${weeklyReport.journal_entries}
- Achievements Earned: ${weeklyReport.achievements_earned}

KEY INSIGHTS:
${weeklyReport.key_insights.map(insight => `- ${insight.title}: ${insight.description}`).join('\n')}

RECOMMENDATIONS:
${weeklyReport.recommendations.map(rec => `- ${rec}`).join('\n')}

Generated by BlindSpot Analytics
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `wellbeing-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Report Downloaded",
      description: "Your weekly report has been saved.",
    });
  };

  const getPriorityColor = (priority: 'low' | 'medium' | 'high') => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800 border-red-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-blue-100 text-blue-800 border-blue-200';
    }
  };

  const getTrendIcon = (trend: 'improving' | 'stable' | 'declining') => {
    switch (trend) {
      case 'improving': return <TrendingUp className="h-4 w-4 text-green-600" />;
      case 'declining': return <TrendingDown className="h-4 w-4 text-red-600" />;
      case 'stable': return <Minus className="h-4 w-4 text-gray-600" />;
    }
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <Card className="max-w-md">
          <CardContent className="pt-6 text-center">
            <p className="text-muted-foreground mb-4">Please sign in to view analytics</p>
            <Button onClick={() => navigate('/auth')}>Sign In</Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      <header className="border-b bg-white/95 backdrop-blur-md sticky top-0 z-40 shadow-sm">
        <div className="container mx-auto px-4 py-4 flex items-center gap-4">
          <Link to="/dashboard">
            <Button variant="ghost" size="sm" className="gap-2">
              <ArrowLeft className="h-4 w-4" />
              Back to Dashboard
            </Button>
          </Link>
          <div className="flex items-center gap-3 flex-1">
            <div className="w-10 h-10 bg-gradient-primary rounded-full flex items-center justify-center">
              <BarChart3 className="h-5 w-5 text-white" />
            </div>
            <div>
              <h1 className="font-semibold">Analytics & Insights</h1>
              <p className="text-sm text-muted-foreground">Track your wellbeing journey progress</p>
            </div>
          </div>
          <Button onClick={refreshData} variant="outline" size="sm" className="gap-2">
            <RefreshCw className="h-4 w-4" />
            Refresh
          </Button>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8 max-w-6xl">
        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as any)}>
          <TabsList className="mb-8">
            <TabsTrigger value="overview" className="gap-2">
              <Activity className="h-4 w-4" />
              Overview
            </TabsTrigger>
            <TabsTrigger value="trends" className="gap-2">
              <TrendingUp className="h-4 w-4" />
              Trends
            </TabsTrigger>
            <TabsTrigger value="insights" className="gap-2">
              <Lightbulb className="h-4 w-4" />
              Insights
            </TabsTrigger>
            <TabsTrigger value="reports" className="gap-2">
              <Calendar className="h-4 w-4" />
              Reports
            </TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-8">
            {/* Key Metrics */}
            {dashboardStats && (
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
                <Card>
                  <CardContent className="pt-6">
                    <div className="text-2xl font-bold text-primary">{dashboardStats.totalMoodEntries}</div>
                    <p className="text-xs text-muted-foreground">Mood Entries</p>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="pt-6">
                    <div className="text-2xl font-bold text-wellbeing">{dashboardStats.averageMood}</div>
                    <p className="text-xs text-muted-foreground">Avg Mood</p>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="pt-6">
                    <div className="text-2xl font-bold text-mindfulness">{dashboardStats.coursesCompleted}</div>
                    <p className="text-xs text-muted-foreground">Courses</p>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="pt-6">
                    <div className="text-2xl font-bold text-accessibility">{dashboardStats.journalEntries}</div>
                    <p className="text-xs text-muted-foreground">Journal Entries</p>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="pt-6">
                    <div className="text-2xl font-bold text-yellow-600">{dashboardStats.achievementsEarned}</div>
                    <p className="text-xs text-muted-foreground">Achievements</p>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="pt-6">
                    <div className="text-2xl font-bold text-orange-600">{dashboardStats.currentStreak}</div>
                    <p className="text-xs text-muted-foreground">Day Streak</p>
                  </CardContent>
                </Card>
              </div>
            )}

            {/* Mood Trends Chart */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span className="flex items-center gap-2">
                    <TrendingUp className="h-5 w-5" />
                    Mood Trends (Last 30 Days)
                  </span>
                  <div className="flex gap-2">
                    {[7, 14, 30, 60].map((days) => (
                      <Button
                        key={days}
                        variant={timeRange === days ? "default" : "outline"}
                        size="sm"
                        onClick={() => setTimeRange(days)}
                      >
                        {days}d
                      </Button>
                    ))}
                  </div>
                </CardTitle>
              </CardHeader>
              <CardContent>
                {moodTrends && moodTrends.length > 0 ? (
                  <ResponsiveContainer width="100%" height={300}>
                    <LineChart data={moodTrends}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis 
                        dataKey="date" 
                        tickFormatter={(date) => new Date(date).toLocaleDateString()}
                      />
                      <YAxis domain={[1, 10]} />
                      <Tooltip 
                        labelFormatter={(date) => new Date(date).toLocaleDateString()}
                        formatter={(value: any) => [value, 'Mood Level']}
                      />
                      <Line 
                        type="monotone" 
                        dataKey="average_mood" 
                        stroke="#8884d8" 
                        strokeWidth={2}
                        dot={{ r: 4 }}
                      />
                    </LineChart>
                  </ResponsiveContainer>
                ) : (
                  <div className="text-center py-8 text-muted-foreground">
                    <BarChart3 className="h-12 w-12 mx-auto mb-2 opacity-50" />
                    <p>No mood data available yet</p>
                    <p className="text-sm">Start tracking your mood to see trends!</p>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Course Impact */}
            {courseImpacts && courseImpacts.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="h-5 w-5" />
                    Course Impact on Mood
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={300}>
                    <BarChart data={courseImpacts}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis 
                        dataKey="course_title" 
                        tick={{ fontSize: 12 }}
                        interval={0}
                        angle={-45}
                        textAnchor="end"
                        height={100}
                      />
                      <YAxis />
                      <Tooltip />
                      <Bar dataKey="improvement" fill="#82ca9d" />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          <TabsContent value="trends" className="space-y-8">
            {/* Detailed Mood Analysis */}
            <Card>
              <CardHeader>
                <CardTitle>Detailed Mood Analysis</CardTitle>
              </CardHeader>
              <CardContent>
                {moodTrends && moodTrends.length > 0 ? (
                  <div className="space-y-6">
                    <ResponsiveContainer width="100%" height={400}>
                      <LineChart data={moodTrends}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis 
                          dataKey="date" 
                          tickFormatter={(date) => new Date(date).toLocaleDateString()}
                        />
                        <YAxis domain={[1, 10]} />
                        <Tooltip 
                          labelFormatter={(date) => new Date(date).toLocaleDateString()}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="average_mood" 
                          stroke="#8884d8" 
                          strokeWidth={3}
                          dot={{ r: 6 }}
                          name="Average Mood"
                        />
                        <Line 
                          type="monotone" 
                          dataKey="entry_count" 
                          stroke="#82ca9d" 
                          strokeWidth={2}
                          dot={{ r: 4 }}
                          name="Entries per Day"
                        />
                      </LineChart>
                    </ResponsiveContainer>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="text-center p-4 border rounded-lg">
                        <div className="text-2xl font-bold text-primary">
                          {moodTrends.reduce((sum, t) => sum + t.average_mood, 0) / moodTrends.length}
                        </div>
                        <p className="text-sm text-muted-foreground">Average Mood</p>
                      </div>
                      <div className="text-center p-4 border rounded-lg">
                        <div className="text-2xl font-bold text-green-600">
                          {Math.max(...moodTrends.map(t => t.average_mood))}
                        </div>
                        <p className="text-sm text-muted-foreground">Highest Mood</p>
                      </div>
                      <div className="text-center p-4 border rounded-lg">
                        <div className="text-2xl font-bold text-blue-600">
                          {moodTrends.reduce((sum, t) => sum + t.entry_count, 0)}
                        </div>
                        <p className="text-sm text-muted-foreground">Total Entries</p>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-8 text-muted-foreground">
                    <p>No trend data available</p>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Accessibility Usage */}
            {accessibilityUsage && accessibilityUsage.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle>Accessibility Feature Usage</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <ResponsiveContainer width="100%" height={300}>
                      <PieChart>
                        <Pie
                          data={accessibilityUsage}
                          dataKey="usage_count"
                          nameKey="feature"
                          cx="50%"
                          cy="50%"
                          outerRadius={80}
                          fill="#8884d8"
                          label={(entry) => entry.feature}
                        >
                          {accessibilityUsage.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                          ))}
                        </Pie>
                        <Tooltip />
                      </PieChart>
                    </ResponsiveContainer>

                    <div className="space-y-3">
                      {accessibilityUsage.map((usage, index) => (
                        <div key={usage.feature} className="flex items-center justify-between p-3 border rounded-lg">
                          <div>
                            <div className="font-medium">{usage.feature}</div>
                            <div className="text-sm text-muted-foreground">
                              Used {usage.usage_count} times
                            </div>
                          </div>
                          <div className="text-right">
                            <div className="text-sm font-medium">
                              {usage.effectiveness_rating}/10
                            </div>
                            <div className="text-xs text-muted-foreground">Effectiveness</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          <TabsContent value="insights" className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold mb-2">Personalized Insights</h2>
              <p className="text-muted-foreground">
                AI-generated insights based on your wellbeing data
              </p>
            </div>

            {insights && insights.length > 0 ? (
              <div className="space-y-6">
                {insights.map((insight, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <Card className={`border-l-4 ${
                      insight.priority === 'high' ? 'border-l-red-500' :
                      insight.priority === 'medium' ? 'border-l-yellow-500' :
                      'border-l-blue-500'
                    }`}>
                      <CardHeader>
                        <div className="flex items-center justify-between">
                          <CardTitle className="flex items-center gap-2">
                            {insight.type === 'mood_pattern' && <TrendingUp className="h-5 w-5" />}
                            {insight.type === 'course_recommendation' && <Target className="h-5 w-5" />}
                            {insight.type === 'accessibility_suggestion' && <Brain className="h-5 w-5" />}
                            {insight.type === 'achievement_milestone' && <Activity className="h-5 w-5" />}
                            {insight.title}
                          </CardTitle>
                          <Badge className={getPriorityColor(insight.priority)}>
                            {insight.priority}
                          </Badge>
                        </div>
                      </CardHeader>
                      <CardContent>
                        <p className="text-muted-foreground mb-4">{insight.description}</p>
                        {insight.actionable && (
                          <div className="flex gap-2">
                            <Button size="sm" variant="outline">
                              Learn More
                            </Button>
                            <Button size="sm">
                              Take Action
                            </Button>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  </motion.div>
                ))}
              </div>
            ) : (
              <Card>
                <CardContent className="text-center py-12">
                  <Lightbulb className="h-16 w-16 mx-auto mb-4 text-muted-foreground" />
                  <h3 className="text-lg font-medium mb-2">No insights available yet</h3>
                  <p className="text-muted-foreground mb-4">
                    Keep using BlindSpot to generate personalized insights!
                  </p>
                  <div className="flex justify-center gap-2">
                    <Link to="/mood">
                      <Button variant="outline" size="sm">Track Mood</Button>
                    </Link>
                    <Link to="/courses">
                      <Button variant="outline" size="sm">Take Course</Button>
                    </Link>
                  </div>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          <TabsContent value="reports" className="space-y-8">
            {weeklyReport && (
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center gap-2">
                      <Calendar className="h-5 w-5" />
                      Weekly Report
                    </CardTitle>
                    <Button onClick={downloadReport} variant="outline" size="sm" className="gap-2">
                      <Download className="h-4 w-4" />
                      Download Report
                    </Button>
                  </div>
                  <p className="text-muted-foreground">{weeklyReport.period}</p>
                </CardHeader>
                <CardContent className="space-y-6">
                  {/* Summary Stats */}
                  <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                    <div className="text-center p-4 border rounded-lg">
                      <div className="flex items-center justify-center mb-2">
                        <span className="text-2xl font-bold text-primary">{weeklyReport.mood_average}</span>
                        {getTrendIcon(weeklyReport.mood_trend)}
                      </div>
                      <p className="text-sm text-muted-foreground">Avg Mood</p>
                      <p className="text-xs text-muted-foreground">{weeklyReport.mood_trend}</p>
                    </div>

                    <div className="text-center p-4 border rounded-lg">
                      <div className="text-2xl font-bold text-mindfulness">{weeklyReport.courses_completed}</div>
                      <p className="text-sm text-muted-foreground">Courses</p>
                    </div>

                    <div className="text-center p-4 border rounded-lg">
                      <div className="text-2xl font-bold text-accessibility">{weeklyReport.journal_entries}</div>
                      <p className="text-sm text-muted-foreground">Journals</p>
                    </div>

                    <div className="text-center p-4 border rounded-lg">
                      <div className="text-2xl font-bold text-yellow-600">{weeklyReport.achievements_earned}</div>
                      <p className="text-sm text-muted-foreground">Achievements</p>
                    </div>

                    <div className="text-center p-4 border rounded-lg">
                      <div className="text-2xl font-bold text-green-600">{weeklyReport.key_insights.length}</div>
                      <p className="text-sm text-muted-foreground">Insights</p>
                    </div>
                  </div>

                  <Separator />

                  {/* Key Insights */}
                  <div>
                    <h3 className="font-semibold mb-4">Key Insights</h3>
                    <div className="space-y-3">
                      {weeklyReport.key_insights.map((insight, index) => (
                        <div key={index} className="flex items-start gap-3 p-3 bg-muted/50 rounded-lg">
                          <Lightbulb className="h-5 w-5 text-yellow-600 mt-0.5" />
                          <div>
                            <div className="font-medium">{insight.title}</div>
                            <p className="text-sm text-muted-foreground">{insight.description}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  <Separator />

                  {/* Recommendations */}
                  <div>
                    <h3 className="font-semibold mb-4">Recommendations</h3>
                    <div className="space-y-2">
                      {weeklyReport.recommendations.map((recommendation, index) => (
                        <div key={index} className="flex items-start gap-3 p-3 bg-blue-50 rounded-lg">
                          <Target className="h-5 w-5 text-blue-600 mt-0.5" />
                          <p className="text-sm">{recommendation}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}